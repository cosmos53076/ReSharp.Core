<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReSharp.Extensions</name>
    </assembly>
    <members>
        <member name="T:ReSharp.Patterns.Command.AsyncCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IAsyncCommand" /> implementation to execute asynchronous operation.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.IAsyncCommand" />
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncCommand.Abort">
            <summary>
            Aborts the asynchronous operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncCommand.Execute(System.Action)">
            <summary>
            Executes this command.
            </summary>
            <param name="executedCallback">
            The callback method when <see cref="T:ReSharp.Patterns.Command.AsyncCommand" /> executed to invoke.
            </param>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncCommand.Executed">
            <summary>
            The <see cref="T:ReSharp.Patterns.Command.AsyncCommand" /> executed.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.AsyncMacroCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand" /> implementation to executes other <see
            cref="T:ReSharp.Patterns.Command.IAsyncCommand" /> s.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.AsyncCommand" />
            <seealso cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand" />
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.Command.AsyncMacroCommand" /> class.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.Abort">
            <summary>
            Aborts asynchronous commands execution.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.AddSubCommand(ReSharp.Patterns.Command.IAsyncCommand)">
            <summary>
            Adds an <see cref="T:ReSharp.Patterns.Command.IAsyncCommand" />.
            </summary>
            <param name="subCommand">
            The <see cref="T:ReSharp.Patterns.Command.IAsyncCommand" /> to be executed by this <see cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand" />.
            </param>
        </member>
        <member name="M:ReSharp.Patterns.Command.AsyncMacroCommand.Execute(System.Action)">
            <summary>
            Executes this command.
            </summary>
            <param name="executedCallback">
            The callback method when <see cref="T:ReSharp.Patterns.Command.AsyncCommand" /> executed to invoke.
            </param>
        </member>
        <member name="T:ReSharp.Patterns.Command.IAsyncCommand">
            <summary>
            The interface definition for an asynchronous command.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IAsyncCommand.Abort">
            <summary>
            Aborts the asynchronous operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IAsyncCommand.Execute(System.Action)">
            <summary>
            Executes this command.
            </summary>
            <param name="executedCallback">
            The callback method when <see cref="T:ReSharp.Patterns.Command.IAsyncCommand" /> executed to invoke.
            </param>
        </member>
        <member name="T:ReSharp.Patterns.Command.IAsyncMacroCommand">
            <summary>
            The interface definition for the command can execute other <see cref="T:ReSharp.Patterns.Command.IAsyncCommand" /> s.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.IAsyncCommand" />
        </member>
        <member name="M:ReSharp.Patterns.Command.IAsyncMacroCommand.AddSubCommand(ReSharp.Patterns.Command.IAsyncCommand)">
            <summary>
            Adds an <see cref="T:ReSharp.Patterns.Command.IAsyncCommand" />.
            </summary>
            <param name="subCommand">
            The <see cref="T:ReSharp.Patterns.Command.IAsyncCommand" /> to be executed by this <see cref="T:ReSharp.Patterns.Command.IAsyncMacroCommand" />.
            </param>
        </member>
        <member name="T:ReSharp.Patterns.Command.ICommand">
            <summary>
            The interface definition for the command.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.ICommand.Execute">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.IMacroCommand">
            <summary>
            The interface definition for the command can execute other <see cref="T:ReSharp.Patterns.Command.ICommand" /> s.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IMacroCommand.AddSubCommand(ReSharp.Patterns.Command.ICommand)">
            <summary>
            Adds an <see cref="T:ReSharp.Patterns.Command.ICommand" />.
            </summary>
            <param name="subCommand">
            The <see cref="T:ReSharp.Patterns.Command.ICommand" /> to be executed by this <see cref="T:ReSharp.Patterns.Command.IMacroCommand" />.
            </param>
        </member>
        <member name="T:ReSharp.Patterns.Command.IUndoableCommand">
            <summary>
            The interface definition for the command that can perform undo operation.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.ICommand" />
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableCommand.Undo">
            <summary>
            Performs undo operation.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.IUndoableMacroCommand">
            <summary>
            The interface definition for the macro command that can execute <see cref="T:ReSharp.Patterns.Command.IUndoableCommand"
            />, perform undo and redo operation.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.Command.IUndoableMacroCommand.CanRedo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand" /> can perform
            redo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand" /> can perform redo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ReSharp.Patterns.Command.IUndoableMacroCommand.CanUndo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand" /> can perform
            undo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand" /> can perform undo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableMacroCommand.Execute(ReSharp.Patterns.Command.IUndoableCommand)">
            <summary>
            Executes the specific <see cref="T:ReSharp.Patterns.Command.IUndoableCommand" />.
            </summary>
            <param name="command">The sepecified <see cref="T:ReSharp.Patterns.Command.IUndoableCommand" /> to execute.</param>
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableMacroCommand.Redo">
            <summary>
            Performs redo operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.IUndoableMacroCommand.Undo">
            <summary>
            Performs undo operation.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.MacroCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IMacroCommand" /> implementation to executes other <see cref="T:ReSharp.Patterns.Command.ICommand" /> s.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.ICommand" />
            <seealso cref="T:ReSharp.Patterns.Command.IMacroCommand" />
        </member>
        <member name="M:ReSharp.Patterns.Command.MacroCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.Command.MacroCommand" /> class.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.MacroCommand.AddSubCommand(ReSharp.Patterns.Command.ICommand)">
            <summary>
            Adds sub command.
            </summary>
            <param name="subCommand">The sub command.</param>
        </member>
        <member name="M:ReSharp.Patterns.Command.MacroCommand.Execute">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Command.UndoableMacroCommand">
            <summary>
            A base <see cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand" /> implementation to execute <see
            cref="T:ReSharp.Patterns.Command.IUndoableCommand" />, perform undo and redo operation.
            </summary>
            <seealso cref="T:ReSharp.Patterns.Command.IUndoableMacroCommand" />
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand" /> class.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.Command.UndoableMacroCommand.CanRedo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand" /> can perform
            redo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand" /> can perform redo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ReSharp.Patterns.Command.UndoableMacroCommand.CanUndo">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand" /> can perform
            undo operation.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:ReSharp.Patterns.Command.UndoableMacroCommand" /> can perform undo operation;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.Execute(ReSharp.Patterns.Command.IUndoableCommand)">
            <summary>
            Executes the specific <see cref="T:ReSharp.Patterns.Command.IUndoableCommand" />.
            </summary>
            <param name="command">The sepecified <see cref="T:ReSharp.Patterns.Command.IUndoableCommand" /> to execute.</param>
            <exception cref="T:System.ArgumentNullException"><c>command</c> is <c>null</c>.</exception>
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.Redo">
            <summary>
            Performs redo operation.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Command.UndoableMacroCommand.Undo">
            <summary>
            Performs undo operation.
            </summary>
        </member>
        <member name="T:ReSharp.Patterns.Singleton`1">
            <summary>
            Abstract class for implementing singleton pattern of thread-safety by using double-check locking.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
        </member>
        <member name="M:ReSharp.Patterns.Singleton`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ReSharp.Patterns.Singleton`1" /> class.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.Singleton`1.Instance">
            <summary>
            Gets the static instance.
            </summary>
            <value>The static instance.</value>
        </member>
        <member name="M:ReSharp.Patterns.Singleton`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.Singleton`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="T:ReSharp.Patterns.State.IState">
            <summary>
            The interface definition for the state class.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.State.IState.OnEnter(ReSharp.Patterns.State.IState)">
            <summary>
            Called when the state is entered.
            </summary>
            <param name="prevState">The previous state.</param>
        </member>
        <member name="M:ReSharp.Patterns.State.IState.OnExecute">
            <summary>
            Called when the state is executing.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.State.IState.OnExit(ReSharp.Patterns.State.IState)">
            <summary>
            Called when the active state is exited.
            </summary>
            <param name="nextState">The next state.</param>
        </member>
        <member name="T:ReSharp.Patterns.State.StateChangedEventArgs">
            <summary>
            The event args given to listeners of the <see cref="E:ReSharp.Patterns.State.StateMachine.StateChanged" /> event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ReSharp.Patterns.State.StateChangedEventArgs.#ctor(ReSharp.Patterns.State.IState,ReSharp.Patterns.State.IState)">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.State.StateChangedEventArgs" /> class with the
            given information.
            </summary>
            <param name="previousState">
            The state before the <see cref="E:ReSharp.Patterns.State.StateMachine.StateChanged" /> event.
            </param>
            <param name="state">The state after the <see cref="E:ReSharp.Patterns.State.StateMachine.StateChanged" /> event.</param>
        </member>
        <member name="P:ReSharp.Patterns.State.StateChangedEventArgs.PreviousState">
            <summary>
            Gets the state before the <see cref="E:ReSharp.Patterns.State.StateMachine.StateChanged" /> event.
            </summary>
            <value>The the previous state.</value>
        </member>
        <member name="P:ReSharp.Patterns.State.StateChangedEventArgs.State">
            <summary>
            Gets the state after the <see cref="E:ReSharp.Patterns.State.StateMachine.StateChanged" /> event.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="T:ReSharp.Patterns.State.StateMachine">
            <summary>
            Represents a state machine to handle the context of state transition.
            </summary>
        </member>
        <member name="M:ReSharp.Patterns.State.StateMachine.#ctor(ReSharp.Patterns.State.IState)">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Patterns.State.StateMachine" /> class with the given information.
            </summary>
            <param name="initialState">The initial state.</param>
        </member>
        <member name="E:ReSharp.Patterns.State.StateMachine.StateChanged">
            <summary>
            Occurs when the state changed.
            </summary>
        </member>
        <member name="P:ReSharp.Patterns.State.StateMachine.CurrentState">
            <summary>
            Gets the state of the current.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ReSharp.Patterns.State.StateMachine.PreviousState">
            <summary>
            Gets the previous state.
            </summary>
            <value>The previous state.</value>
        </member>
        <member name="M:ReSharp.Patterns.State.StateMachine.ChangeState(ReSharp.Patterns.State.IState)">
            <summary>
            Change the state of this <see cref="T:ReSharp.Patterns.State.StateMachine" />.
            </summary>
            <param name="state">
            The state value to set for this <see cref="T:ReSharp.Patterns.State.StateMachine" />.
            </param>
            <exception cref="T:System.ArgumentNullException">state</exception>
        </member>
        <member name="M:ReSharp.Patterns.State.StateMachine.Execute">
            <summary>
            Runs the state's execution logic.
            </summary>
        </member>
        <member name="F:System.BindingAttributes.DefaultBindingAttr">
            <summary>
            The default binding attribute.
            </summary>
        </member>
        <member name="F:System.BindingAttributes.DefaultInstanceBindingAttr">
            <summary>
            The default instance binding attribute.
            </summary>
        </member>
        <member name="F:System.BindingAttributes.DefaultStaticBindingAttr">
            <summary>
            The default static binding attribute.
            </summary>
        </member>
        <member name="F:System.BindingAttributes.DefaultStaticGetFieldBindingAttr">
            <summary>
            The default static get field binding attribute.
            </summary>
        </member>
        <member name="F:System.BindingAttributes.DefaultStaticGetPropertyBindingAttr">
            <summary>
            The default static get property binding attribute.
            </summary>
        </member>
        <member name="T:System.Collections.CollectionExtensions">
            <summary>
            Extension methods for collection classes.
            </summary>
        </member>
        <member name="M:System.Collections.CollectionExtensions.AddUnique(System.Collections.IList,System.Object)">
            <summary>
            Adds a unique item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IList"/> to add unique item.</param>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item
            was not inserted into the collection.
            </returns>
        </member>
        <member name="M:System.Collections.CollectionExtensions.CopyTo(System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Copies all the elements of the <see cref="T:System.Collections.IList"/> to the specific <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="source">The source object of the <see cref="T:System.Collections.IList"/>.</param>
            <param name="target">The target object of the <see cref="T:System.Collections.IList"/>.</param>
            <param name="index">
            A 32-bit integer that represents the index in <see cref="T:System.Collections.IList"/> at which copying begins.
            </param>
        </member>
        <member name="M:System.Collections.CollectionExtensions.IndexOfMax(System.Collections.IList,System.Int32)">
            <summary>
            Searches for the maximum object and returns the index of object in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IList"/> to search.</param>
            <param name="count">The number of objects in the section to search.</param>
            <returns>The index of maximum object in the <see cref="T:System.Collections.IList"/>.</returns>
        </member>
        <member name="M:System.Collections.CollectionExtensions.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Swaps a element in one index with another element in another index.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IList"/> to swap elements.</param>
            <param name="a">The first index of element in the <see cref="T:System.Collections.IList"/> to swap.</param>
            <param name="b">The second index of element in the <see cref="T:System.Collections.IList"/> to swap.</param>
        </member>
        <member name="M:System.Collections.CollectionExtensions.ToArrayString(System.Collections.IList)">
            <summary>
            Converts the value of the current <see cref="T:System.Collections.IList"/> to its equivalent array string representation.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.IList"/> object.</param>
            <returns>The array string representation of the value of <see cref="T:System.Collections.IList"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.GenericCollectionExtensions">
            <summary>
            Extension methods for generic collection classes.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds a unique item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.Generic.ICollection`1"/> to add unique item.</param>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="T:System.Collections.Generic.IDictionaryExtensions">
            <summary>
            Extension methods for interface <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.AddUnique``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Adds the value with unique key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source Dictionary object.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="canReplace">
            if set to <c>true</c>, the value will be replaced when find same key.
            </param>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.GetKey``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Gets the key by value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source Dictionary object.</param>
            <param name="value">The value.</param>
            <returns>The value object.</returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])">
            <summary>
            Merges dictionaries.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="others">The other dictionaries.</param>
            <returns>The dictionary contains all values of source dictionary and others.</returns>
        </member>
        <member name="T:System.Collections.Generic.LinkedStack`1">
            <summary>
            Represents a linked stack.
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            Implements the <see cref="T:System.Collections.ICollection" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.ICollection" />
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedStack`1" /> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedStack`1" /> class that contains elements copied from the specified collection and has
            sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection to copy elements from.</param>
        </member>
        <member name="P:System.Collections.Generic.LinkedStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.LinkedStack`1" />.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.LinkedStack`1" />.</value>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:System.Collections.Generic.LinkedStack`1" />.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:System.Collections.Generic.LinkedStack`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.LinkedStack`1" />. The value can be null for reference types.</param>
            <returns><c>true</c> if <c>item</c> is found in the <see cref="T:System.Collections.Generic.LinkedStack`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:System.Collections.Generic.LinkedStack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.LinkedStack`1" />. The
            <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <c>array</c> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><c>array</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>arrayIndex</c> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.LinkedStack`1" /> is greater than the available space from <c>arrayIndex</c> to the end
            of the destination <c>array</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:System.Collections.Generic.LinkedStack`1" />.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.LinkedStack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.LinkedStack`1" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.Peek">
            <summary>
            Returns the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" /> without removing it.
            </summary>
            <returns>The object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" />.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.LinkedStack`1" /> is empty.</exception>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.Pop">
            <summary>
            Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" />.
            </summary>
            <returns>The object removed from the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" />.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.LinkedStack`1" /> is empty.</exception>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.Push(`0)">
            <summary>
            Inserts an object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" />.
            </summary>
            <param name="item">The object to push onto the <see cref="T:System.Collections.Generic.LinkedStack`1" />. The value can be <c>null</c> for reference types.</param>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.ToArray">
            <summary>
            Copies the <see cref="T:System.Collections.Generic.LinkedStack`1" /> to a new array.
            </summary>
            <returns>A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.LinkedStack`1" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.TryPeek(`0@)">
            <summary>
            Tries to get the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" /> without removing it, and returns a value that indicates whether
            the object exists.
            </summary>
            <param name="result">
            When this method returns, contains the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" />, or default value of <c>T</c>.
            </param>
            <returns><c>true</c> if the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.TryPop(`0@)">
            <summary>
            Tries to remove and get the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" />, and returns a value that indicates whether the object exists.
            </summary>
            <param name="result">
            When this method returns, contains the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" />, or default value of <c>T</c>.
            </param>
            <returns><c>true</c> if the object at the top of the <see cref="T:System.Collections.Generic.LinkedStack`1" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Collections.Generic.LinkedStack`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:System.Collections.Generic.LinkedStack`1" />. Implements the <see cref="T:System.Collections.Generic.IEnumerator`1" />.
            Implements the <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1" />
            <seealso cref="T:System.Collections.IEnumerator" />
        </member>
        <member name="P:System.Collections.Generic.LinkedStack`1.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator. Implements the <see
            cref="P:System.Collections.Generic.IEnumerator`1.Current" />.
            </summary>
            <value>The element in the <see cref="T:System.Collections.Generic.LinkedStack`1" /> at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="P:System.Collections.Generic.LinkedStack`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator. Implements the <see cref="P:System.Collections.IEnumerator.Current" />.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:System.Collections.Generic.LinkedStack`1.Enumerator" />.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedStack`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.LinkedStack`1" />. Implements the <see
            cref="M:System.Collections.IEnumerator.MoveNext" />.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:System.Collections.Generic.Tree`1">
            <summary>
            Represents a tree data structure.
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            Implements the <see cref="T:System.Collections.IEnumerable" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:System.Collections.Generic.Tree`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Tree`1" /> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.#ctor(System.Collections.Generic.TreeNode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Tree`1" /> class that have a root <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
            <param name="root">The root <see cref="T:System.Collections.Generic.TreeNode`1" />.</param>
        </member>
        <member name="P:System.Collections.Generic.Tree`1.Root">
            <summary>
            Gets or sets the root <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
            <value>The root <see cref="T:System.Collections.Generic.TreeNode`1" />.</value>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.PostorderTraverse">
            <summary>
            Performs post-order traversal.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1" /> contains the results of post-order traversal.</returns>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.PreoderTraverse">
            <summary>
            Performs pre-order traversal.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1" /> contains the results of pre-order traversal.</returns>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:System.Collections.Generic.TreeNode`1">
            <summary>
            Represents a node in a <see cref="T:System.Collections.Generic.Tree`1" />. This class cannot be inherited. Implements the <see
            cref="T:System.Collections.Generic.ICollection`1" /> Implements the <see cref="T:System.Collections.ICollection" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
            <seealso cref="T:System.Collections.ICollection" />
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.TreeNode`1" /> class, containing the specified value.
            </summary>
            <param name="value">The value to contain in the <see cref="T:System.Collections.Generic.TreeNode`1" />.</param>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Ancestors">
            <summary>
            Gets the array contains ancestor <see cref="T:System.Collections.Generic.TreeNode`1" /> s.
            </summary>
            <value>The array contains ancestor <see cref="T:System.Collections.Generic.TreeNode`1" /> s.</value>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Degree">
            <summary>
            Gets the degree of this <see cref="T:System.Collections.Generic.TreeNode`1" />, that means the total number of children nodes.
            </summary>
            <value>The degree of this <see cref="T:System.Collections.Generic.TreeNode`1" />.</value>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Collections.Generic.TreeNode`1" /> is leaf node of the <see cref="T:System.Collections.Generic.Tree`1" />.
            </summary>
            <value><c>true</c> if this <see cref="T:System.Collections.Generic.TreeNode`1" /> is leaf node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.IsRoot">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Collections.Generic.TreeNode`1" /> is root node of the <see cref="T:System.Collections.Generic.Tree`1" />.
            </summary>
            <value><c>true</c> if this <see cref="T:System.Collections.Generic.TreeNode`1" /> is root node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Level">
            <summary>
            Gets the zero-based depth of the tree node in the <see cref="T:System.Collections.Generic.Tree`1" />.
            </summary>
            <value>The zero-based depth of the tree node in the <see cref="T:System.Collections.Generic.Tree`1" />.</value>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Parent">
            <summary>
            Gets the parent <see cref="T:System.Collections.Generic.TreeNode`1" /> of this <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
            <value>The parent <see cref="T:System.Collections.Generic.TreeNode`1" /> of this <see cref="T:System.Collections.Generic.TreeNode`1" />.</value>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Tree">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Tree`1" /> who owns this <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
            <value>The <see cref="T:System.Collections.Generic.Tree`1" /> who owns this <see cref="T:System.Collections.Generic.TreeNode`1" />.</value>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Value">
            <summary>
            Gets the value contained in the <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
            <value>The value contained in the <see cref="T:System.Collections.Generic.TreeNode`1" />.</value>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.AddChild(`0)">
            <summary>
            Adds a new child <see cref="T:System.Collections.Generic.TreeNode`1" /> containing the specified value.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The new child <see cref="T:System.Collections.Generic.TreeNode`1" /> containing value.</returns>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.AddChild(System.Collections.Generic.TreeNode{`0})">
            <summary>
            Adds the specified new child <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
            <param name="child">The new child <see cref="T:System.Collections.Generic.TreeNode`1" /> to add.</param>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.Clear">
            <summary>
            Removes all <see cref="T:System.Collections.Generic.TreeNode`1" /> s under this <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.ContainsChild(`0)">
            <summary>
            Determines whether a child <see cref="T:System.Collections.Generic.TreeNode`1" /> contains value is in the <see cref="T:System.Collections.Generic.TreeNode`1" />.
            </summary>
            <param name="value">
            The value to locate in the children nodes of this <see cref="T:System.Collections.Generic.TreeNode`1" />. The value can be <c>null</c> for reference types.
            </param>
            <returns><c>true</c> if <c>value</c> is found in the children nodes of this <see cref="T:System.Collections.Generic.TreeNode`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the children nodes to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the children nodes copied from this <see cref="T:System.Collections.Generic.TreeNode`1" />.
            The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <c>array</c> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><c>array</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is less than zero..</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.TreeNode`1" /> is greater than the available space from <c>index</c> to the end of the
            destination <c>array</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.FindChild(`0)">
            <summary>
            Finds the first child <see cref="T:System.Collections.Generic.TreeNode`1" /> that contains the specified value.
            </summary>
            <param name="value">The value to locate in the children nodes of this <see cref="T:System.Collections.Generic.TreeNode`1" />.</param>
            <returns>The first child <see cref="T:System.Collections.Generic.TreeNode`1" /> that contains the specified value, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.IEnumerator`1" />.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.RemoveChild(`0)">
            <summary>
            Removes the first occurrence of the specified value from the children nodes.
            </summary>
            <param name="value">The value to remove from the children nodes.</param>
            <returns>
            <c>true</c> if the element containing <c>value</c> is successfully removed, <c>false</c> otherwise. This method also returns <c>false</c>
            if <c>value</c> was not found in the children nodes.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.RemoveChild(System.Collections.Generic.TreeNode{`0})">
            <summary>
            Removes the child <see cref="T:System.Collections.Generic.TreeNode`1" /> from the <see cref="T:System.Collections.Generic.Tree`1" />.
            </summary>
            <param name="child">The child <see cref="T:System.Collections.Generic.TreeNode`1" /> to remove from the <see cref="T:System.Collections.Generic.Tree`1" />.</param>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToTimestamp(System.DateTime)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to a local timestamp.
            </summary>
            <param name="dateTime">The current <see cref="T:System.DateTime"/> object.</param>
            <returns>
            The value of the current <see cref="T:System.DateTime"/> object expressed as a local timestamp.
            </returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToTimestampUtc(System.DateTime)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to an UTC timestamp.
            </summary>
            <param name="dateTime">The current <see cref="T:System.DateTime"/> object.</param>
            <returns>
            The value of the current <see cref="T:System.DateTime"/> object expressed as an UTC timestamp.
            </returns>
        </member>
        <member name="T:System.DateTimeUtility">
            <summary>
            Provides utility functions for object of <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="P:System.DateTimeUtility.NowTimestamp">
            <summary>
            Gets a local timestamp of the <see cref="P:System.DateTime.Now" />.
            </summary>
            <value>The value of the <see cref="P:System.DateTime.Now" /> expressed as a local timestamp.</value>
        </member>
        <member name="P:System.DateTimeUtility.UtcNowTimestamp">
            <summary>
            Gets an UTC timestamp of the <see cref="P:System.DateTime.UtcNow" />.
            </summary>
            <value>The value of the <see cref="P:System.DateTime.UtcNow" /> expressed as an UTC timestamp.</value>
        </member>
        <member name="M:System.DateTimeUtility.ParseTimestamp(System.Int64)">
            <summary>
            Converts a local timestamp to a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="timestamp">The locale timestamp.</param>
            <returns>A <see cref="T:System.DateTime" /> object represents the local timestamp.</returns>
        </member>
        <member name="M:System.DateTimeUtility.ParseTimestampUtc(System.Int64)">
            <summary>
            Converts an UTC timestamp to a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="timestamp">The UTC timestamp.</param>
            <returns>A <see cref="T:System.DateTime" /> object represents the UTC timestamp.</returns>
        </member>
        <member name="T:System.EnumUtility">
            <summary>
            Provides utilities to deal with <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:System.EnumUtility.ConvertToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts the <see cref="T:System.String"/> to the sepecified <see cref="T:System.Enum"/> value.
            </summary>
            <typeparam name="TEnum">The type of the sepecified <see cref="T:System.Enum"/>.</typeparam>
            <param name="value">The <see cref="T:System.String"/> of the value of <see cref="T:System.Enum"/>.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to regard case.</param>
            <returns>The <see cref="T:System.Enum"/> value.</returns>
        </member>
        <member name="T:System.Int16Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:System.Int16Extensions.Reverse(System.Int16)">
            <summary>
            Reverse and advances the position of the source by two bytes.
            </summary>
            <param name="source">The <see cref="T:System.Int16"/> to reverse.</param>
            <returns>A 2-byte signed short integer in reverse.</returns>
        </member>
        <member name="T:System.Int32Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:System.Int32Extensions.Reverse(System.Int32)">
            <summary>
            Reverse and advances the position of the source by four bytes.
            </summary>
            <param name="source">The <see cref="T:System.Int32"/> to reverse.</param>
            <returns>A 4-byte signed integer in reverse.</returns>
        </member>
        <member name="T:System.Int64Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:System.Int64Extensions.Reverse(System.Int64)">
            <summary>
            Reverse and advances the position of the source by eight bytes.
            </summary>
            <param name="source">The <see cref="T:System.Int64"/> to reverse.</param>
            <returns>A 8-byte signed long integer in reverse.</returns>
        </member>
        <member name="T:System.IO.BinaryReaderExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.IO.BinaryReader"/>.
            </summary>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadBytesReverse(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads the specified number of bytes in reverse from the current stream into a byte array
            and advances the current position by that number of bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read byte array.</param>
            <param name="count">
            The number of bytes to read. This value must be 0 or a non-negative number or an
            exception will occur.
            </param>
            <returns>
            A byte array containing data in reverse read from the underlying stream. This might be
            less than the number of bytes requested if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadInt16Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 2-byte signed integer in reverse from the current stream and advances the
            current position of the stream by two bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read signed short integer.</param>
            <returns>A 2-byte signed short integer in reverse read from the current stream.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadInt32Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 4-byte signed integer in reverse from the current stream and advances the
            current position of the stream by four bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read signed integer.</param>
            <returns>A 4-byte signed integer in reverse read from the current stream.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadInt64Reverse(System.IO.BinaryReader)">
            <summary>
            Reads an 8-byte signed integer in reverse from the current stream and advances the
            current position of the stream by eight bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read signed long integer.</param>
            <returns>A 8-byte signed long integer in reverse read from the current stream.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadUInt16Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 2-byte unsigned integer in reverse from the current stream and advances the
            position of the stream by two bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read unsigned short integer.</param>
            <returns>A 2-byte unsigned short integer in reverse read from this stream.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadUInt32Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 4-byte unsigned integer in reverse from the current stream and advances the
            position of the stream by four bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read unsigned integer.</param>
            <returns>A 4-byte unsigned integer in reverse read from this stream.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadUInt64Reverse(System.IO.BinaryReader)">
            <summary>
            Reads an 8-byte unsigned integer in reverse from the current stream and advances the
            position of the stream by eight bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read unsigned long integer.</param>
            <returns>A 8-byte unsigned long integer in reverse read from this stream.</returns>
        </member>
        <member name="T:System.IO.FileInfoExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.IO.FileInfo"/>.
            </summary>
        </member>
        <member name="M:System.IO.FileInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            Renames the file.
            </summary>
            <param name="source">The source object of FileInfo.</param>
            <param name="newFileName">The new file name.</param>
        </member>
        <member name="T:System.IO.PathUtility">
            <summary>
            Provides methods for processing directory strings in an ideally cross-platform manner.
            </summary>
        </member>
        <member name="M:System.IO.PathUtility.UnifyToAltDirectorySeparatorChar(System.String)">
            <summary>
            Unifies all the path separator chars to alternate directory separator characters.
            </summary>
            <param name="path">The source path.</param>
            <returns>The unified path.</returns>
        </member>
        <member name="M:System.IO.PathUtility.UnifyToDirectorySeparatorChar(System.String)">
            <summary>
            Unifies all the path alternate separator chars to directory separator characters.
            </summary>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:System.IO.StreamExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:System.IO.StreamExtensions.ToByteArray(System.IO.Stream)">
            <summary>
            Convert a <see cref="T:System.IO.Stream"/> to a byte array.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/>.</param>
            <returns>The byte array converted.</returns>
        </member>
        <member name="T:System.MathUtility">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other common
            mathematical functions. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.MathUtility.GenerateRandomSeed">
            <summary>
            Generates the random seed.
            </summary>
            <returns>The random seed.</returns>
        </member>
        <member name="M:System.MathUtility.GenGaussianRandomNumber">
            <summary>
            Generate Gaussian Random Number.
            </summary>
            <returns>The Gaussian Random Number.</returns>
        </member>
        <member name="M:System.MathUtility.GetReciprocal(System.Single)">
            <summary>
            Gets the reciprocal of a number.
            </summary>
            <param name="number">The number.</param>
            <returns>The reciprocal of the number.</returns>
        </member>
        <member name="M:System.MathUtility.IsOdd(System.Int32)">
            <summary>
            Determines whether the specific <see cref="T:System.Int32"/> is odd.
            </summary>
            <param name="n">The <see cref="T:System.Int32"/>.</param>
            <returns><c>true</c> if the specific <see cref="T:System.Int32"/> is odd; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.MathUtility.IsOdd(System.Single)">
            <summary>
            Determines whether the specific <see cref="T:System.Single"/> is odd.
            </summary>
            <param name="n">The <see cref="T:System.Single"/>.</param>
            <returns><c>true</c> if the specific <see cref="T:System.Single"/> is odd; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:System.ObjectExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:System.ObjectExtensions.DeepClone(System.Object)">
            <summary>
            Creates a deep copy of the current <see cref="T:System.Object"/>.
            </summary>
            <param name="source">The current <see cref="T:System.Object"/>.</param>
            <returns>A deep copy of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:System.ObjectExtensions.DeepClone``1(System.Object)">
            <summary>
            Creates a deep copy of the current <see cref="T:System.Object"/>, and return an object which is
            inherited from the type of current <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T">The type of object return.</typeparam>
            <param name="source">The current <see cref="T:System.Object"/>.</param>
            <returns>The object which is inherited from the type of current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:System.ObjectExtensions.GetEventInvocationList(System.Object,System.Reflection.EventInfo)">
            <summary>
            Returns the invocation list of the specific <see cref="T:System.Reflection.EventInfo"/> of the target <see cref="T:System.Object"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="eventInfo">The specific <see cref="T:System.Reflection.EventInfo"/>.</param>
            <returns>
            The invocation list of the specific <see cref="T:System.Reflection.EventInfo"/> of the target <see cref="T:System.Object"/>
            </returns>
            <exception cref="T:System.ArgumentNullException"><c>eventInfo</c> is <c>null</c>.</exception>
        </member>
        <member name="M:System.ObjectExtensions.GetFieldValue(System.Object,System.String)">
            <summary>
            Gets the normal field value by a given field name.
            </summary>
            <param name="source">The object whose field value will be returned.</param>
            <param name="fieldName">The string containing the name of the data field to get.</param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:System.ObjectExtensions.GetFieldValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the field value by a given field name and a bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object whose field value will be returned.</param>
            <param name="fieldName">The string containing the name of the data field to get.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:System.ObjectExtensions.GetFieldValuePairs(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Gets the field value pairs.
            </summary>
            <param name="source">The source.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>The field value pairs of the type.</returns>
        </member>
        <member name="M:System.ObjectExtensions.GetPropertyValue(System.Object,System.String,System.Object[])">
            <summary>
            Gets the property value of by a given property name and index values for indexed properties.
            </summary>
            <param name="source">The object whose property value will be returned.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="index">
            Optional index values for indexed properties. The indexes of indexed properties are
            zero-based. This value should be null for non-indexed properties.
            </param>
            <returns>An object containing the value of the property reflected by this instance.</returns>
        </member>
        <member name="M:System.ObjectExtensions.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Gets the property value of by a given property name, a bitmask comprised of one or more
            <see cref="T:System.Reflection.BindingFlags"/> and index values for indexed properties.
            </summary>
            <param name="source">The object whose property value will be returned.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="index">
            Optional index values for indexed properties. The indexes of indexed properties are
            zero-based. This value should be null for non-indexed properties.
            </param>
            <returns>An object containing the value of the property reflected by this instance.</returns>
        </member>
        <member name="M:System.ObjectExtensions.GetPropertyValuePairs(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Gets the property value pairs.
            </summary>
            <param name="source">The source.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>The property value pairs of the type.</returns>
        </member>
        <member name="M:System.ObjectExtensions.HasMethod(System.Object,System.String)">
            <summary>
            Determines whether has the specified method by a given name with the default instance of
            bitmask comprised of <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object to search.</param>
            <param name="methodName">Name of the method.</param>
            <returns><c>true</c> if this object has the specified method; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.ObjectExtensions.HasMethod(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Determines whether has the specified method by a given name and a bitmask comprised of
            one or more <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object to search.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns><c>true</c> if this object has the specified method; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.ObjectExtensions.InvokeGenericMethod(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the generic method by a given name, the type to be substituted for the type
            parameters of the current generic method definition and parameters for the method with
            the default instance bitmask comprised of <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">
            Types to be substituted for the type parameters of the current generic method definition.
            </param>
            <param name="parameters">The parameters for the method.</param>
            <returns>An object containing the return value of the invoked method.</returns>
        </member>
        <member name="M:System.ObjectExtensions.InvokeGenericMethod(System.Object,System.String,System.Type[],System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the generic method by a given name, the type to be substituted for the type
            parameters of the current generic method definition, a bitmask comprised of one or more
            <see cref="T:System.Reflection.BindingFlags"/> and parameters for the method.
            </summary>
            <param name="source">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">
            Types to be substituted for the type parameters of the current generic method definition.
            </param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="parameters">The parameters for the method.</param>
            <returns>An object containing the return value of the invoked method.</returns>
        </member>
        <member name="M:System.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method by a given name and parameters for the method with the default
            instance bitmask comprised of <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>An object containing the return value of the invoked method.</returns>
        </member>
        <member name="M:System.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the method by a given name, a bitmask comprised of one or more <see
            cref="T:System.Reflection.BindingFlags"/> and parameters for the method.
            </summary>
            <param name="source">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="parameters">The parameters for the method.</param>
            <returns>An object containing the return value of the invoked method.</returns>
        </member>
        <member name="M:System.ObjectExtensions.RemoveAllEventHandlers(System.Object)">
            <summary>
            Removes all event handlers from an event source.
            </summary>
            <param name="source">The event source.</param>
        </member>
        <member name="M:System.ObjectExtensions.RemoveEventHandlers(System.Object,System.String)">
            <summary>
            Removes event handlers from an event source by given name of event.
            </summary>
            <param name="source">The event source.</param>
            <param name="eventName">The name of the event.</param>
        </member>
        <member name="M:System.ObjectExtensions.SetObjectFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the object field value by a given field name and the value to set with the default
            instance attribute of <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object whose field value to set.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.ObjectExtensions.SetObjectFieldValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            Sets the object field value by a given field name, a bitmask comprised of one or more
            <see cref="T:System.Reflection.BindingFlags"/> and the value to set.
            </summary>
            <param name="source">The object whose field value to set.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.ObjectExtensions.SetObjectPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the object property value by a given property name and the value to set with the
            default instance attribute of <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object whose property value to set.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.ObjectExtensions.SetObjectPropertyValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            Sets the object property value by a given property name, a bitmask comprised of one or
            more <see cref="T:System.Reflection.BindingFlags"/> and the value to set.
            </summary>
            <param name="source">The object whose property value to set.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:System.RandomExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.Random"/>.
            </summary>
        </member>
        <member name="M:System.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random double that is within a specific range.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a randome double.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater
            than or equal to <c>minValue</c>.
            </param>
            <returns>
            A double greater than or equal to <c>minValue</c> and less than <c>maxValue</c>; that
            is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>. If
            <c>minValue</c> equals <c>maxValue</c>, <c>minValue</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>minValue</c> is greater than <c>maxValue</c>.</exception>
        </member>
        <member name="M:System.RandomExtensions.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Returns a random 64-bit signed integer that is within a specific range.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a randome 64-bit signed integer.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater
            than or equal to <c>minValue</c>.
            </param>
            <returns>
            A 64-bit signed integer greater than or equal to <c>minValue</c> and less than
            <c>maxValue</c>; that is, the range of return values includes <c>minValue</c> but not
            <c>maxValue</c>. If <c>minValue</c> equals <c>maxValue</c>, <c>minValue</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>minValue</c> is greater than <c>maxValue</c>.</exception>
        </member>
        <member name="M:System.RandomExtensions.NextSingle(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random single that is within a specific range.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a single double.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater
            than or equal to <c>minValue</c>.
            </param>
            <returns>
            A single greater than or equal to <c>minValue</c> and less than <c>maxValue</c>; that
            is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>. If
            <c>minValue</c> equals <c>maxValue</c>, <c>minValue</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>minValue</c> is greater than <c>maxValue</c>.</exception>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:System.StringExtensions.whitespaceChars">
            <summary>
            The whitespace chars definitions.
            </summary>
        </member>
        <member name="M:System.StringExtensions.HasValue(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> has value.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to check.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.String"/> has value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.KmpIndexOf(System.String,System.String)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this
            instance by KMP algorithm.
            </summary>
            <param name="source">The source string.</param>
            <param name="value">The string to seek.</param>
            <returns>
            The zero-based index position of <b>value</b> if that string is found, or -1 if it is
            not. If <b>value</b> is <see cref="F:System.String.Empty"/>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException"><b>source</b> is <b>null</b>.</exception>
        </member>
        <member name="M:System.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the specified <see cref="T:System.String"/>.
            </summary>
            <param name="source">The specified <see cref="T:System.String"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <b>source</b> is <b>null</b> or <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the specified string to camel case (just converts first character to lowercase).
            </summary>
            <param name="source">The source string.</param>
            <returns>The specified string converted to camel case.</returns>
        </member>
        <member name="M:System.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Converts the specified string to snake case.
            </summary>
            <param name="source">The source string.</param>
            <returns>The specified string converted to snake case.</returns>
        </member>
        <member name="M:System.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Converts the specified string to title case (just converts first character to uppercase).
            </summary>
            <param name="source">The source string.</param>
            <returns>The specified string converted to title case.</returns>
        </member>
        <member name="M:System.StringExtensions.TrimAll(System.String)">
            <summary>
            Trims all whitespace characters.
            </summary>
            <param name="source">The source string.</param>
            <returns>The string with removing all whitespace characters.</returns>
        </member>
        <member name="M:System.StringExtensions.TrimAll(System.String,System.Char[])">
            <summary>
            Trims all characters assigned.
            </summary>
            <param name="source">The source string.</param>
            <param name="trimChars">The trim characters assigned.</param>
            <returns>The string with removing all characters assigned.</returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Extension method collection for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetStaticFieldValue(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the static field value.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get static field value.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The value of the static field.</returns>
        </member>
        <member name="M:System.TypeExtensions.GetStaticFieldValuePairs(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the static field value pairs.
            </summary>
            <param name="type">The type.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The static field value pairs of the type.</returns>
        </member>
        <member name="M:System.TypeExtensions.GetStaticPropertyValue(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the static property value.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get static property value.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The value of the static property.</returns>
        </member>
        <member name="M:System.TypeExtensions.GetStaticPropertyValuePairs(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the static property value pairs.
            </summary>
            <param name="type">The type.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The static property value pairs of the type.</returns>
        </member>
        <member name="M:System.TypeExtensions.HasStaticMethod(System.Type,System.String)">
            <summary>
            Determines whether this <see cref="T:System.Type"/> has the static method by a given name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="methodName">Name of the method.</param>
            <returns><c>true</c> if this <see cref="T:System.Type"/> [has static method]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeConstructor(System.Type,System.Reflection.BindingFlags,System.Type[],System.Object[])">
            <summary>
            Invokes the constructor of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/>, a
            bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/>, an array of <see
            cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the
            constructor to get and the parameters for the constructor.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke constructor.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="types">
            An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the constructor to get.
            </param>
            <param name="parameters">
            An array of values that matches the number, order and type (under the constraints of the
            default binder) of the parameters for this constructor.
            </param>
            <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeConstructor(System.Type,System.Object[])">
            <summary>
            Invokes the constructor of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/> and the
            parameters for the constructor with the default instance bitmask comprised of <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke constructor.</param>
            <param name="parameters">
            An array of values that matches the number, order and type (under the constraints of the
            default binder) of the parameters for this constructor.
            </param>
            <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeConstructor(System.Type,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the constructor of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/>, a
            bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> and the parameters for the constructor.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke constructor.</param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="parameters">
            An array of values that matches the number, order and type (under the constraints of the
            default binder) of the parameters for this constructor.
            </param>
            <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeConstructor(System.Type,System.Type[],System.Object[])">
            <summary>
            Invokes the constructor of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/>, an
            array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the constructor to get and the parameters for the constructor.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke constructor.</param>
            <param name="types">
            An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the constructor to get.
            </param>
            <param name="parameters">
            An array of values that matches the number, order and type (under the constraints of the
            default binder) of the parameters for this constructor.
            </param>
            <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeGenericStaticMethod(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the generic static method of the <see cref="T:System.Type"/> by the given <see
            cref="T:System.Type"/>, a given name, a generic <see cref="T:System.Type"/> and the parameters for the
            static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke generic static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">
            Types to be substituted for the type parameters for the current generic method definition.
            </param>
            <param name="parameters">The parameters for the generic static method.</param>
            <returns>The object of the method return.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeGenericStaticMethod(System.Type,System.String,System.Type[],System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the generic static method of the <see cref="T:System.Type"/> by the given <see
            cref="T:System.Type"/>, a given name, a generic <see cref="T:System.Type"/> and the parameters for the
            static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke generic static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">
            Types to be substituted for the type parameters for the current generic method definition.
            </param>
            <param name="bindingAttr">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <param name="parameters">The parameters for the generic static method.</param>
            <returns>The object of the method return.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeStaticMethod(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the static method by a given <see cref="T:System.Type"/>, a given name of method, an
            array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the static method to get and the parameters for the static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">
            An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the static method to get.
            </param>
            <param name="parameters">The parameters for the static method.</param>
            <returns>The object of static method return.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeStaticMethod(System.Type,System.String,System.Type[],System.Object[]@)">
            <summary>
            Invokes the static method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">The types array of parameters.</param>
            <param name="parameters">The referenced parameters.</param>
            <returns>The object of static method return.</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes the static method of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/>, a
            given name of method and the parameters for the static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters for the static method.</param>
            <returns>The object of static method return.</returns>
        </member>
        <member name="M:System.TypeExtensions.SetStaticFieldValue(System.Type,System.String,System.Object)">
            <summary>
            Sets the static field value of the <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to set static field value.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value of the static field to set.</param>
        </member>
        <member name="M:System.TypeExtensions.SetStaticPropertyValue(System.Type,System.String,System.Object)">
            <summary>
            Sets the static property value of the <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to set static property value.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value of the static property.</param>
        </member>
        <member name="T:System.UInt16Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="M:System.UInt16Extensions.Reverse(System.UInt16)">
            <summary>
            Reverse and advances the position of the source by two bytes.
            </summary>
            <param name="source">The <see cref="T:System.UInt16"/> to reverse.</param>
            <returns>A 2-byte unsigned short integer in reverse.</returns>
        </member>
        <member name="T:System.UInt32Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:System.UInt32Extensions.Reverse(System.UInt32)">
            <summary>
            Reverse and advances the position of the source by four bytes.
            </summary>
            <param name="source">The <see cref="T:System.UInt32"/> to reverse.</param>
            <returns>A 4-byte unsigned integer in reverse.</returns>
        </member>
        <member name="T:System.UInt64Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="M:System.UInt64Extensions.Reverse(System.UInt64)">
            <summary>
            Reverse and advances the position of the source by eight bytes.
            </summary>
            <param name="source">The <see cref="T:System.UInt64"/> to reverse.</param>
            <returns>A 8-byte unsigned long integer in reverse.</returns>
        </member>
    </members>
</doc>
