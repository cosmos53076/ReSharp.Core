<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReSharp.Extensions</name>
    </assembly>
    <members>
        <member name="T:ReSharp.Extensions.BindingFlagsCollection">
            <summary>
            The collection of <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.DefaultBindingFlags">
            <summary>
            The default binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.InstanceBindingFlags">
            <summary>
            The default instance binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.InstanceGetFieldBindingFlags">
            <summary>
            The default instance get field binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.InstanceSetFieldBindingFlags">
            <summary>
            The default instance set field binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.InstanceFieldBindingFlags">
            <summary>
            The default instance get and set field binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.InstanceGetPropertyBindingFlags">
            <summary>
            The default instance get property binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.InstanceSetPropertyBindingFlags">
            <summary>
            The default instance set property binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.InstancePropertyBindingFlags">
            <summary>
            The default instance property binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.ConstructorBindingFlags">
            <summary>
            The default binding flags for constructor.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticBindingFlags">
            <summary>
            The default static binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticConstructorBindingFlags">
            <summary>
            The default binding flags for static constructor.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticGetFieldBindingFlags">
            <summary>
            The default static get field binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticSetFieldBindingFlags">
            <summary>
            The default static set field binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticFieldBindingFlags">
            <summary>
            The default static field binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticGetPropertyBindingFlags">
            <summary>
            The default static get property binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticSetPropertyBindingFlags">
            <summary>
            The default static set property binding flags.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.BindingFlagsCollection.StaticPropertyBindingFlags">
            <summary>
            The default static property binding flags.
            </summary>
        </member>
        <member name="T:ReSharp.Extensions.GenericCollectionExtensions">
            <summary>
            Extension methods for generic collection classes.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.GenericCollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds a unique item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.Generic.ICollection`1"/> to add unique item.</param>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="T:ReSharp.Extensions.IDictionaryExtensions">
            <summary>
            Extension methods for interface <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.IDictionaryExtensions.AddUnique``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Adds the value with unique key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source Dictionary object.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="canReplace">
            if set to <c>true</c>, the value will be replaced when find same key.
            </param>
        </member>
        <member name="M:ReSharp.Extensions.IDictionaryExtensions.GetKey``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Gets the key by value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source Dictionary object.</param>
            <param name="value">The value.</param>
            <returns>The value object.</returns>
        </member>
        <member name="M:ReSharp.Extensions.IDictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])">
            <summary>
            Merges dictionaries.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="others">The other dictionaries.</param>
            <returns>The dictionary contains all values of source dictionary and others.</returns>
        </member>
        <member name="T:ReSharp.Extensions.LinkedStack`1">
            <summary>
            Represents a linked stack.
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            Implements the <see cref="T:System.Collections.ICollection" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.ICollection" />
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> class.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> class that contains elements copied from the specified collection and has
            sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection to copy elements from.</param>
        </member>
        <member name="P:ReSharp.Extensions.LinkedStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.
            </summary>
            <value>The number of elements contained in the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.</value>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:ReSharp.Extensions.LinkedStack`1" />. The value can be null for reference types.</param>
            <returns><c>true</c> if <c>item</c> is found in the <see cref="T:ReSharp.Extensions.LinkedStack`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:ReSharp.Extensions.LinkedStack`1" />. The
            <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <c>array</c> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><c>array</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>arrayIndex</c> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:ReSharp.Extensions.LinkedStack`1" /> is greater than the available space from <c>arrayIndex</c> to the end
            of the destination <c>array</c>.
            </exception>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.
            </summary>
            <returns>An <see cref="T:ReSharp.Extensions.LinkedStack`1.Enumerator" /> for the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.</returns>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.Peek">
            <summary>
            Returns the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> without removing it.
            </summary>
            <returns>The object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ReSharp.Extensions.LinkedStack`1" /> is empty.</exception>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.Pop">
            <summary>
            Removes and returns the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.
            </summary>
            <returns>The object removed from the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ReSharp.Extensions.LinkedStack`1" /> is empty.</exception>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.Push(`0)">
            <summary>
            Inserts an object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.
            </summary>
            <param name="item">The object to push onto the <see cref="T:ReSharp.Extensions.LinkedStack`1" />. The value can be <c>null</c> for reference types.</param>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.ToArray">
            <summary>
            Copies the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> to a new array.
            </summary>
            <returns>A new array containing copies of the elements of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />.</returns>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.TryPeek(`0@)">
            <summary>
            Tries to get the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> without removing it, and returns a value that indicates whether
            the object exists.
            </summary>
            <param name="result">
            When this method returns, contains the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />, or default value of <c>T</c>.
            </param>
            <returns><c>true</c> if the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.TryPop(`0@)">
            <summary>
            Tries to remove and get the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />, and returns a value that indicates whether the object exists.
            </summary>
            <param name="result">
            When this method returns, contains the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />, or default value of <c>T</c>.
            </param>
            <returns><c>true</c> if the object at the top of the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ReSharp.Extensions.LinkedStack`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:ReSharp.Extensions.LinkedStack`1" />. Implements the <see cref="T:System.Collections.Generic.IEnumerator`1" />.
            Implements the <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1" />
            <seealso cref="T:System.Collections.IEnumerator" />
        </member>
        <member name="P:ReSharp.Extensions.LinkedStack`1.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator. Implements the <see
            cref="P:System.Collections.Generic.IEnumerator`1.Current" />.
            </summary>
            <value>The element in the <see cref="T:ReSharp.Extensions.LinkedStack`1" /> at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="P:ReSharp.Extensions.LinkedStack`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator. Implements the <see cref="P:System.Collections.IEnumerator.Current" />.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:ReSharp.Extensions.LinkedStack`1.Enumerator" />.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.LinkedStack`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:ReSharp.Extensions.LinkedStack`1" />. Implements the <see
            cref="M:System.Collections.IEnumerator.MoveNext" />.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:ReSharp.Extensions.Tree`1">
            <summary>
            Represents a tree data structure.
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            Implements the <see cref="T:System.Collections.IEnumerable" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:ReSharp.Extensions.Tree`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Extensions.Tree`1" /> class.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.Tree`1.#ctor(ReSharp.Extensions.TreeNode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Extensions.Tree`1" /> class that have a root <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
            <param name="root">The root <see cref="T:ReSharp.Extensions.TreeNode`1" />.</param>
        </member>
        <member name="P:ReSharp.Extensions.Tree`1.Root">
            <summary>
            Gets or sets the root <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
            <value>The root <see cref="T:ReSharp.Extensions.TreeNode`1" />.</value>
        </member>
        <member name="M:ReSharp.Extensions.Tree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:ReSharp.Extensions.Tree`1.PostorderTraverse">
            <summary>
            Performs post-order traversal.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1" /> contains the results of post-order traversal.</returns>
        </member>
        <member name="M:ReSharp.Extensions.Tree`1.PreoderTraverse">
            <summary>
            Performs pre-order traversal.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1" /> contains the results of pre-order traversal.</returns>
        </member>
        <member name="M:ReSharp.Extensions.Tree`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:ReSharp.Extensions.TreeNode`1">
            <summary>
            Represents a node in a <see cref="T:ReSharp.Extensions.Tree`1" />. This class cannot be inherited. Implements the <see
            cref="T:System.Collections.Generic.ICollection`1" /> Implements the <see cref="T:System.Collections.ICollection" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
            <seealso cref="T:System.Collections.ICollection" />
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ReSharp.Extensions.TreeNode`1" /> class, containing the specified value.
            </summary>
            <param name="value">The value to contain in the <see cref="T:ReSharp.Extensions.TreeNode`1" />.</param>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.Ancestors">
            <summary>
            Gets the array contains ancestor <see cref="T:ReSharp.Extensions.TreeNode`1" /> s.
            </summary>
            <value>The array contains ancestor <see cref="T:ReSharp.Extensions.TreeNode`1" /> s.</value>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.Degree">
            <summary>
            Gets the degree of this <see cref="T:ReSharp.Extensions.TreeNode`1" />, that means the total number of children nodes.
            </summary>
            <value>The degree of this <see cref="T:ReSharp.Extensions.TreeNode`1" />.</value>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Extensions.TreeNode`1" /> is leaf node of the <see cref="T:ReSharp.Extensions.Tree`1" />.
            </summary>
            <value><c>true</c> if this <see cref="T:ReSharp.Extensions.TreeNode`1" /> is leaf node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.IsRoot">
            <summary>
            Gets a value indicating whether this <see cref="T:ReSharp.Extensions.TreeNode`1" /> is root node of the <see cref="T:ReSharp.Extensions.Tree`1" />.
            </summary>
            <value><c>true</c> if this <see cref="T:ReSharp.Extensions.TreeNode`1" /> is root node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.Level">
            <summary>
            Gets the zero-based depth of the tree node in the <see cref="T:ReSharp.Extensions.Tree`1" />.
            </summary>
            <value>The zero-based depth of the tree node in the <see cref="T:ReSharp.Extensions.Tree`1" />.</value>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.Parent">
            <summary>
            Gets the parent <see cref="T:ReSharp.Extensions.TreeNode`1" /> of this <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
            <value>The parent <see cref="T:ReSharp.Extensions.TreeNode`1" /> of this <see cref="T:ReSharp.Extensions.TreeNode`1" />.</value>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.Tree">
            <summary>
            Gets the <see cref="T:ReSharp.Extensions.Tree`1" /> who owns this <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
            <value>The <see cref="T:ReSharp.Extensions.Tree`1" /> who owns this <see cref="T:ReSharp.Extensions.TreeNode`1" />.</value>
        </member>
        <member name="P:ReSharp.Extensions.TreeNode`1.Value">
            <summary>
            Gets the value contained in the <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
            <value>The value contained in the <see cref="T:ReSharp.Extensions.TreeNode`1" />.</value>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.AddChild(`0)">
            <summary>
            Adds a new child <see cref="T:ReSharp.Extensions.TreeNode`1" /> containing the specified value.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The new child <see cref="T:ReSharp.Extensions.TreeNode`1" /> containing value.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.AddChild(ReSharp.Extensions.TreeNode{`0})">
            <summary>
            Adds the specified new child <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
            <param name="child">The new child <see cref="T:ReSharp.Extensions.TreeNode`1" /> to add.</param>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.Clear">
            <summary>
            Removes all <see cref="T:ReSharp.Extensions.TreeNode`1" /> s under this <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.ContainsChild(`0)">
            <summary>
            Determines whether a child <see cref="T:ReSharp.Extensions.TreeNode`1" /> contains value is in the <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            </summary>
            <param name="value">
            The value to locate in the children nodes of this <see cref="T:ReSharp.Extensions.TreeNode`1" />. The value can be <c>null</c> for reference types.
            </param>
            <returns><c>true</c> if <c>value</c> is found in the children nodes of this <see cref="T:ReSharp.Extensions.TreeNode`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the children nodes to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the children nodes copied from this <see cref="T:ReSharp.Extensions.TreeNode`1" />.
            The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <c>array</c> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><c>array</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is less than zero..</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:ReSharp.Extensions.TreeNode`1" /> is greater than the available space from <c>index</c> to the end of the
            destination <c>array</c>.
            </exception>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.FindChild(`0)">
            <summary>
            Finds the first child <see cref="T:ReSharp.Extensions.TreeNode`1" /> that contains the specified value.
            </summary>
            <param name="value">The value to locate in the children nodes of this <see cref="T:ReSharp.Extensions.TreeNode`1" />.</param>
            <returns>The first child <see cref="T:ReSharp.Extensions.TreeNode`1" /> that contains the specified value, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.IEnumerator`1" />.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.RemoveChild(`0)">
            <summary>
            Removes the first occurrence of the specified value from the children nodes.
            </summary>
            <param name="value">The value to remove from the children nodes.</param>
            <returns>
            <c>true</c> if the element containing <c>value</c> is successfully removed, <c>false</c> otherwise. This method also returns <c>false</c>
            if <c>value</c> was not found in the children nodes.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.TreeNode`1.RemoveChild(ReSharp.Extensions.TreeNode{`0})">
            <summary>
            Removes the child <see cref="T:ReSharp.Extensions.TreeNode`1" /> from the <see cref="T:ReSharp.Extensions.Tree`1" />.
            </summary>
            <param name="child">The child <see cref="T:ReSharp.Extensions.TreeNode`1" /> to remove from the <see cref="T:ReSharp.Extensions.Tree`1" />.</param>
        </member>
        <member name="T:ReSharp.Extensions.IListExtensions">
            <summary>
            Extension methods for interface <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.IListExtensions.AddUnique(System.Collections.IList,System.Object)">
            <summary>
            Adds a unique item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="source">A <see cref="T:System.Collections.IList"/> to add unique item.</param>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item
            was not inserted into the collection.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.IListExtensions.CopyTo(System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Copies all the elements of the <see cref="T:System.Collections.IList"/> to the specific <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="source">The source object of the <see cref="T:System.Collections.IList"/>.</param>
            <param name="target">The target object of the <see cref="T:System.Collections.IList"/>.</param>
            <param name="index">
            A 32-bit integer that represents the index in <see cref="T:System.Collections.IList"/> at which copying begins.
            </param>
        </member>
        <member name="M:ReSharp.Extensions.IListExtensions.IndexOfMax(System.Collections.IList,System.Int32)">
            <summary>
            Searches for the maximum object and returns the index of object in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IList"/> to search.</param>
            <param name="count">The number of objects in the section to search.</param>
            <returns>The index of maximum object in the <see cref="T:System.Collections.IList"/>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.IListExtensions.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Swaps a element in one index with another element in another index.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IList"/> to swap elements.</param>
            <param name="a">The first index of element in the <see cref="T:System.Collections.IList"/> to swap.</param>
            <param name="b">The second index of element in the <see cref="T:System.Collections.IList"/> to swap.</param>
        </member>
        <member name="M:ReSharp.Extensions.IListExtensions.FisherYatesShuffle(System.Collections.IList,System.Int32)">
            <summary>
            Implements Fisher-Yates Shuffle algorithm.
            </summary>
            <param name="list">The <see cref="T:System.Collections.IList"/> object. </param>
            <param name="seed">The random seed. </param>
        </member>
        <member name="M:ReSharp.Extensions.IListExtensions.ToArrayString(System.Collections.IList)">
            <summary>
            Converts the value of the current <see cref="T:System.Collections.IList"/> to its equivalent array string representation.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.IList"/> object.</param>
            <returns>The array string representation of the value of <see cref="T:System.Collections.IList"/>.</returns>
        </member>
        <member name="T:ReSharp.Extensions.DateTimeExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.DateTimeExtensions.StartTime">
            <summary>
            The <see cref="T:System.DateTime"/> start position.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to a local timestamp.
            </summary>
            <param name="dateTime">The current <see cref="T:System.DateTime"/> object.</param>
            <returns>
            The value of the current <see cref="T:System.DateTime"/> object expressed as a local timestamp.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeExtensions.ToTimestampInMilliseconds(System.DateTime)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to a local timestamp in milliseconds.
            </summary>
            <param name="dateTime">The current <see cref="T:System.DateTime"/> object.</param>
            <returns>
            The value of the current <see cref="T:System.DateTime"/> object expressed as a local timestamp in milliseconds.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeExtensions.ToTimestampUtc(System.DateTime)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to an UTC timestamp.
            </summary>
            <param name="dateTime">The current <see cref="T:System.DateTime"/> object.</param>
            <returns>
            The value of the current <see cref="T:System.DateTime"/> object expressed as an UTC timestamp.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeExtensions.ToTimestampInMillisecondsUtc(System.DateTime)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to an UTC timestamp in milliseconds.
            </summary>
            <param name="dateTime">The current <see cref="T:System.DateTime"/> object.</param>
            <returns>
            The value of the current <see cref="T:System.DateTime"/> object expressed as an UTC timestamp in milliseconds.
            </returns>
        </member>
        <member name="T:ReSharp.Extensions.DateTimeUtility">
            <summary>
            Provides utility functions for object of <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="P:ReSharp.Extensions.DateTimeUtility.NowTimestamp">
            <summary>
            Gets a local timestamp of the <see cref="P:System.DateTime.Now" />.
            </summary>
            <value>The value of the <see cref="P:System.DateTime.Now" /> expressed as a local timestamp.</value>
        </member>
        <member name="P:ReSharp.Extensions.DateTimeUtility.UtcNowTimestamp">
            <summary>
            Gets an UTC timestamp of the <see cref="P:System.DateTime.UtcNow" />.
            </summary>
            <value>The value of the <see cref="P:System.DateTime.UtcNow" /> expressed as an UTC timestamp.</value>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeUtility.ParseTimestamp(System.Int64)">
            <summary>
            Converts a local timestamp to a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="timestamp">The locale timestamp.</param>
            <returns>A <see cref="T:System.DateTime" /> object represents the local timestamp.</returns>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeUtility.ParseTimestampInMilliseconds(System.Int64)">
            <summary>
            Converts a local timestamp in milliseconds to a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="timestamp">The locale timestamp in milliseconds.</param>
            <returns>A <see cref="T:System.DateTime" /> object represents the local timestamp in milliseconds.</returns>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeUtility.ParseTimestampUtc(System.Int64)">
            <summary>
            Converts an UTC timestamp to a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="timestamp">The UTC timestamp.</param>
            <returns>A <see cref="T:System.DateTime" /> object represents the UTC timestamp.</returns>
        </member>
        <member name="M:ReSharp.Extensions.DateTimeUtility.ParseTimestampInMillisecondsUtc(System.Int64)">
            <summary>
            Converts an UTC timestamp in milliseconds to a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="timestamp">The UTC timestamp in milliseconds.</param>
            <returns>A <see cref="T:System.DateTime" /> object represents the UTC timestamp in milliseconds.</returns>
        </member>
        <member name="T:ReSharp.Extensions.EnumUtility">
            <summary>
            Provides utilities to deal with <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.EnumUtility.ConvertToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts the <see cref="T:System.String"/> to the specified <see cref="T:System.Enum"/> value.
            </summary>
            <typeparam name="TEnum">The type of the specified <see cref="T:System.Enum"/>.</typeparam>
            <param name="value">The <see cref="T:System.String"/> of the value of <see cref="T:System.Enum"/>.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to regard case.</param>
            <returns>The <see cref="T:System.Enum"/> value.</returns>
        </member>
        <member name="T:ReSharp.Extensions.Int16Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.Int16Extensions.Reverse(System.Int16)">
            <summary>
            Reverse and advances the position of the source by two bytes.
            </summary>
            <param name="source">The <see cref="T:System.Int16"/> to reverse.</param>
            <returns>A 2-byte signed short integer in reverse.</returns>
        </member>
        <member name="M:ReSharp.Extensions.Int16Extensions.GetLastDigits(System.Int16,System.Int32)">
            <summary>
            Gets the integer number that the last <c>digits</c> present.
            </summary>
            <param name="source">The <see cref="T:System.Int16"/> to convert.</param>
            <param name="digits">The digits. </param>
            <returns></returns>
        </member>
        <member name="T:ReSharp.Extensions.Int32Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.Int32Extensions.Reverse(System.Int32)">
            <summary>
            Reverse and advances the position of the source by four bytes.
            </summary>
            <param name="source">The <see cref="T:System.Int32"/> to reverse.</param>
            <returns>A 4-byte signed integer in reverse.</returns>
        </member>
        <member name="M:ReSharp.Extensions.Int32Extensions.GetLastDigits(System.Int32,System.Int32)">
            <summary>
            Gets the integer number that the last <c>digits</c> present.
            </summary>
            <param name="source">The <see cref="T:System.Int32"/> to convert.</param>
            <param name="digits">The digits. </param>
            <returns></returns>
        </member>
        <member name="T:ReSharp.Extensions.Int64Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.Int64Extensions.Reverse(System.Int64)">
            <summary>
            Reverse and advances the position of the source by eight bytes.
            </summary>
            <param name="source">The <see cref="T:System.Int64"/> to reverse.</param>
            <returns>A 8-byte signed long integer in reverse.</returns>
        </member>
        <member name="M:ReSharp.Extensions.Int64Extensions.GetLastDigits(System.Int64,System.Int32)">
            <summary>
            Gets the integer number that the last <c>digits</c> present.
            </summary>
            <param name="source">The <see cref="T:System.Int64"/> to convert.</param>
            <param name="digits">The digits. </param>
            <returns></returns>
        </member>
        <member name="T:ReSharp.Extensions.BinaryReaderExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.IO.BinaryReader"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.BinaryReaderExtensions.ReadBytesReverse(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads the specified number of bytes in reverse from the current stream into a byte array
            and advances the current position by that number of bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read byte array.</param>
            <param name="count">
            The number of bytes to read. This value must be 0 or a non-negative number or an
            exception will occur.
            </param>
            <returns>
            A byte array containing data in reverse read from the underlying stream. This might be
            less than the number of bytes requested if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.BinaryReaderExtensions.ReadInt16Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 2-byte signed integer in reverse from the current stream and advances the
            current position of the stream by two bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read signed short integer.</param>
            <returns>A 2-byte signed short integer in reverse read from the current stream.</returns>
        </member>
        <member name="M:ReSharp.Extensions.BinaryReaderExtensions.ReadInt32Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 4-byte signed integer in reverse from the current stream and advances the
            current position of the stream by four bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read signed integer.</param>
            <returns>A 4-byte signed integer in reverse read from the current stream.</returns>
        </member>
        <member name="M:ReSharp.Extensions.BinaryReaderExtensions.ReadInt64Reverse(System.IO.BinaryReader)">
            <summary>
            Reads an 8-byte signed integer in reverse from the current stream and advances the
            current position of the stream by eight bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read signed long integer.</param>
            <returns>A 8-byte signed long integer in reverse read from the current stream.</returns>
        </member>
        <member name="M:ReSharp.Extensions.BinaryReaderExtensions.ReadUInt16Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 2-byte unsigned integer in reverse from the current stream and advances the
            position of the stream by two bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read unsigned short integer.</param>
            <returns>A 2-byte unsigned short integer in reverse read from this stream.</returns>
        </member>
        <member name="M:ReSharp.Extensions.BinaryReaderExtensions.ReadUInt32Reverse(System.IO.BinaryReader)">
            <summary>
            Reads a 4-byte unsigned integer in reverse from the current stream and advances the
            position of the stream by four bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read unsigned integer.</param>
            <returns>A 4-byte unsigned integer in reverse read from this stream.</returns>
        </member>
        <member name="M:ReSharp.Extensions.BinaryReaderExtensions.ReadUInt64Reverse(System.IO.BinaryReader)">
            <summary>
            Reads an 8-byte unsigned integer in reverse from the current stream and advances the
            position of the stream by eight bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read unsigned long integer.</param>
            <returns>A 8-byte unsigned long integer in reverse read from this stream.</returns>
        </member>
        <member name="T:ReSharp.Extensions.FileInfoExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.IO.FileInfo"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.FileInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            Renames the file.
            </summary>
            <param name="source">The source object of FileInfo.</param>
            <param name="newFileName">The new file name.</param>
        </member>
        <member name="T:ReSharp.Extensions.FileUtility">
            <summary>
            Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryCreate(System.String,System.Int32,System.IO.FileOptions,System.IO.FileStream@)">
            <summary>
            Tries to create or overwrites a file in the specified path, specifying a buffer size and options that describe how to create or overwrite the file.
            </summary>
            <param name="path">The path and name of the file to create. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file. </param>
            <param name="fileStream">A new file with the specified buffer size. </param>
            <returns><c>true</c> if create or overwrites a file in the specified path successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryCrete(System.String,System.IO.FileStream@)">
            <summary>
            Tries to create or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create. </param>
            <param name="fileStream">A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <c>path</c>.</param>
            <returns><c>true</c> if create or overwrites a file in the specified path successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryCreate(System.String,System.Int32,System.IO.FileStream@)">
            <summary>
            Tries to create or overwrites a file in the specified path, specifying a buffer size.
            </summary>
            <param name="path">The path and name of the file to create. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <param name="fileStream">A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <c>path</c>. </param>
            <returns><c>true</c> if create or overwrites a file in the specified path successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryCreateText(System.String,System.IO.StreamWriter@)">
            <summary>
            Tries to create or opens a file for writing UTF-8 encoded text. If the file already exists, its contents are overwritten.
            </summary>
            <param name="path">The file to be opened for writing. </param>
            <param name="streamWriter">A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding. </param>
            <returns><c>true</c> if create or opens a file for writing UTF-8 encoded text successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryOpen(System.String,System.IO.FileMode,System.IO.FileStream@)">
            <summary>
            Tries to open a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access with no sharing.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
            <param name="fileStream">A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared. </param>
            <returns><c>true</c> if open a <see cref="T:System.IO.FileStream"/> on the specified path successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryOpen(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileStream@)">
            <summary>
            Tries to opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access with no sharing.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
            <param name="fileStream">An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access. </param>
            <returns><c>true</c> if open a <see cref="T:System.IO.FileStream"/> on the specified path successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryOpen(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileStream@)">
            <summary>
            Tries to open a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. </param>
            <param name="fileStream">A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. </param>
            <returns><c>true</c> if open a <see cref="T:System.IO.FileStream"/> on the specified path successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryOpenRead(System.String,System.IO.FileStream@)">
            <summary>
            Tries to open an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading. </param>
            <param name="fileStream">A read-only <see cref="T:System.IO.FileStream"/> on the specified path. </param>
            <returns><c>true</c> if open a read-only <see cref="T:System.IO.FileStream"/> on the specified path successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryOpenText(System.String,System.IO.StreamReader@)">
            <summary>
            Tries to open an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading. </param>
            <param name="streamReader">A <see cref="T:System.IO.StreamReader"/> on the specified path. </param>
            <returns><c>true</c> if open an existing UTF-8 encoded text file successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryOpenWrite(System.String,System.IO.FileStream@)">
            <summary>
            Tries to open an existing file or creates a new file for writing.
            </summary>
            <param name="path">The file to be opened for writing. </param>
            <param name="fileStream">An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with Write access. </param>
            <returns><c>true</c> if open an existing file or creates a new file for writing successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryAppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tries to append lines to a file, and then close the file.
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist. </param>
            <param name="contents">The lines to append to the file. </param>
            <returns><c>true</c> if append lines to a file successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryAppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Tires to append lines to a file by using a specified encoding, and then close the file.
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist. </param>
            <param name="contents">The lines to append to the file. </param>
            <param name="encoding">The character encoding to use. </param>
            <returns><c>true</c> if append lines to a file successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryAppendAllText(System.String,System.String)">
            <summary>
            Tries to append the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to. </param>
            <param name="contents">The string to append to the file. </param>
            <returns><c>true</c> if append the specified string to the file successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryAppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Tries to append the specified string to the file using the specified encoding, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to. </param>
            <param name="contents">The string to append to the file. </param>
            <param name="encoding">The character encoding to use. </param>
            <returns><c>true</c> if append the specified string to the file successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryAppendText(System.String,System.IO.StreamWriter@)">
            <summary>
            Tries to create a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.
            </summary>
            <param name="path">The path to the file to append to. </param>
            <param name="streamWriter">A stream writer that appends UTF-8 encoded text to the specified file or to a new file. </param>
            <returns><c>true</c> if creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryLoad(System.String,System.Byte[]@)">
            <summary>
            Tries to load raw data in the file.
            </summary>
            <param name="path">The file to open for loading. </param>
            <param name="bytes">A byte array containing the contents of the file. </param>
            <returns><c>true</c> if the specified file loaded; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryLoad(System.String,System.String[]@)">
            <summary>
            Tries to load all lines content in the file.
            </summary>
            <param name="path">The file to open for loading. </param>
            <param name="contents">A string array containing all lines of the file. </param>
            <returns><c>true</c> if the specified file loaded; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryLoad(System.String,System.Text.Encoding,System.String[]@)">
            <summary>
            Tries to load all lines content in the file.
            </summary>
            <param name="path">The file to open for loading. </param>
            <param name="encoding">The encoding applied to the contents of the file. </param>
            <param name="contents">A string array containing all lines of the file. </param>
            <returns><c>true</c> if the specified file loaded; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryLoad(System.String,System.String@)">
            <summary>
            Tries to load all the text in the file.
            </summary>
            <param name="path">The file to open for loading. </param>
            <param name="contents">A string containing all the text in the file. </param>
            <returns><c>true</c> if the specified file loaded; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryLoad(System.String,System.Text.Encoding,System.String@)">
            <summary>
            Tries to load all the text in the file.
            </summary>
            <param name="path">The file to open for loading. </param>
            <param name="encoding">The encoding applied to the contents of the file. </param>
            <param name="contents">A string containing all the text in the file. </param>
            <returns><c>true</c> if the specified file loaded; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TrySave(System.String,System.Byte[])">
            <summary>
            Tries to create a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to save to. </param>
            <param name="bytes">The bytes to write to the file.</param>
            <returns><c>true</c> if the specified file saved with writing bytes; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TrySave(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tries to create a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to save to. </param>
            <param name="contents">The lines to write to the file. </param>
            <returns><c>true</c> if the specified file saved with writing lines; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TrySave(System.String,System.String[])">
            <summary>
            Tries to create a new file, write the specified string array to the file, and then closes the file.
            </summary>
            <param name="path">The file to save to. </param>
            <param name="contents">The string array to write to the file. </param>
            <returns><c>true</c> if the specified file saved with writing string array; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TrySave(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Tries to create a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to save to. </param>
            <param name="contents">The lines to write to the file. </param>
            <param name="encoding">The character encoding to use. </param>
            <returns><c>true</c> if the specified file saved with writing lines; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TrySave(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Tries to create a new file, write the specified string array to the file, and then closes the file.
            </summary>
            <param name="path">The file to save to. </param>
            <param name="contents">The string array to write to the file. </param>
            <param name="encoding">The character encoding to use. </param>
            <returns><c>true</c> if the specified file saved with writing string array; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TrySave(System.String,System.String)">
            <summary>
            Tries to create a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to save to. </param>
            <param name="contents">The string to write to the file. </param>
            <returns><c>true</c> if the specified file saved with writing contents; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TrySave(System.String,System.String,System.Text.Encoding)">
            <summary>
            Tries to create a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to save to. </param>
            <param name="contents">The string to write to the file. </param>
            <param name="encoding">The encoding to apply to the string. </param>
            <returns><c>true</c> if the specified file saved with writing contents; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryDelete(System.String)">
            <summary>
            Tries to delete the specified file without exception.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported. </param>
            <returns><c>true</c> if the specified file deleted; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryCopy(System.String,System.String)">
            <summary>
            Tries to copy an existing file to a new file without exception. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <returns><c>true</c> if file copied successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryCopy(System.String,System.String,System.Boolean)">
            <summary>
            Tries to copy an existing file to a new file without exception. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <returns><c>true</c> if file copied successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ReSharp.Extensions.FileUtility.TryMove(System.String,System.String)">
            <summary>
            Tries to move a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path. </param>
            <param name="destFileName">The new path and name for the file. </param>
            <returns><c>true</c> if a specified file moved successfully; <c>false</c> otherwise. </returns>
        </member>
        <member name="T:ReSharp.Extensions.PathUtility">
            <summary>
            Provides methods for processing directory strings in an ideally cross-platform manner.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.PathUtility.UnifyToAltDirectorySeparatorChar(System.String)">
            <summary>
            Unifies all the path separator chars to alternate directory separator characters.
            </summary>
            <param name="path">The source path.</param>
            <returns>The unified path.</returns>
        </member>
        <member name="M:ReSharp.Extensions.PathUtility.UnifyToDirectorySeparatorChar(System.String)">
            <summary>
            Unifies all the path alternate separator chars to directory separator characters.
            </summary>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ReSharp.Extensions.StreamExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.StreamExtensions.ToByteArray(System.IO.Stream)">
            <summary>
            Convert a <see cref="T:System.IO.Stream"/> to a byte array.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/>.</param>
            <returns>The byte array converted.</returns>
        </member>
        <member name="T:ReSharp.Extensions.MathUtility">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other common
            mathematical functions. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.MathUtility.GenerateRandomSeed">
            <summary>
            Generates the random seed.
            </summary>
            <returns>The random seed.</returns>
        </member>
        <member name="M:ReSharp.Extensions.MathUtility.GenGaussianRandomNumber">
            <summary>
            Generate Gaussian Random Number.
            </summary>
            <returns>The Gaussian Random Number.</returns>
        </member>
        <member name="M:ReSharp.Extensions.MathUtility.GetReciprocal(System.Single)">
            <summary>
            Gets the reciprocal of a number.
            </summary>
            <param name="number">The number.</param>
            <returns>The reciprocal of the number.</returns>
        </member>
        <member name="M:ReSharp.Extensions.MathUtility.IsOdd(System.Int32)">
            <summary>
            Determines whether the specific <see cref="T:System.Int32"/> is odd.
            </summary>
            <param name="n">The <see cref="T:System.Int32"/>.</param>
            <returns><c>true</c> if the specific <see cref="T:System.Int32"/> is odd; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.MathUtility.IsOdd(System.Single)">
            <summary>
            Determines whether the specific <see cref="T:System.Single"/> is odd.
            </summary>
            <param name="n">The <see cref="T:System.Single"/>.</param>
            <returns><c>true</c> if the specific <see cref="T:System.Single"/> is odd; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ReSharp.Extensions.ObjectExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.ShallowClone``1(``0)">
            <summary>
            Creates a shallow clone of the current <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T">The type of object return.</typeparam>
            <param name="source">The current <see cref="T:System.Object"/>.</param>
            <returns>A shallow clone of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.DeepClone(System.Object)">
            <summary>
            Creates a deep clone of the current <see cref="T:System.Object"/>.
            </summary>
            <param name="source">The current <see cref="T:System.Object"/>.</param>
            <returns>A deep clone of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.DeepClone``1(System.Object)">
            <summary>
            Creates a deep clone of the current <see cref="T:System.Object"/>, and return an object which has same fields or properties of current <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T">The type of object return.</typeparam>
            <param name="source">The current <see cref="T:System.Object"/>.</param>
            <returns>A deep clone of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.GetCustomAttribute``1(System.Object,System.Boolean)">
            <summary>
            Gets an custom attribute on an object.
            </summary>
            <param name="source">The object. </param>
            <param name="inherit">
            <c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>. This parameter is ignored for properties and events.
            </param>
            <typeparam name="T">The type of the custom attribute you want to retrieve. </typeparam>
            <returns>The attribute of type <c>T</c> that exists on the object. </returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.GetEventField(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the event field with the specified name.
            </summary>
            <param name="source"></param>
            <param name="eventName"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.GetFieldValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the field value by a given field name and a bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object whose field value will be returned.</param>
            <param name="fieldName">The string containing the name of the data field to get.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.SetFieldValue(System.Object,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the object field value by a given field name, a bitmask comprised of one or more
            <see cref="T:System.Reflection.BindingFlags"/> and the value to set.
            </summary>
            <param name="source">The object whose field value to set.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.GetFieldValuePairs(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Gets the field value pairs.
            </summary>
            <param name="source">The source.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The field value pairs of the type.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.GetPropertyValue(System.Object,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Gets the property value of by a given property name, a bitmask comprised of one or more
            <see cref="T:System.Reflection.BindingFlags"/> and index values for indexed properties.
            </summary>
            <param name="source">The object whose property value will be returned.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="index">
            Optional index values for indexed properties. The indexes of indexed properties are
            zero-based. This value should be null for non-indexed properties.
            </param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>An object containing the value of the property reflected by this instance.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the object property value by a given property name, a bitmask comprised of one or
            more <see cref="T:System.Reflection.BindingFlags"/> and the value to set.
            </summary>
            <param name="source">The object whose property value to set.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.GetPropertyValuePairs(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Gets the property value pairs.
            </summary>
            <param name="source">The source.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>The property value pairs of the type.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.HasMethod(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Determines whether has the specified method by a given name and a bitmask comprised of
            one or more <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="source">The object to search.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns><c>true</c> if this object has the specified method; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Invokes the method by a given name, a bitmask comprised of one or more <see
            cref="T:System.Reflection.BindingFlags"/> and parameters for the method.
            </summary>
            <param name="source">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>An object containing the return value of the invoked method.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.InvokeGenericMethod(System.Object,System.String,System.Type[],System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Invokes the generic method by a given name, the type to be substituted for the type
            parameters of the current generic method definition, a bitmask comprised of one or more
            <see cref="T:System.Reflection.BindingFlags"/> and parameters for the method.
            </summary>
            <param name="source">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">
            Types to be substituted for the type parameters of the current generic method definition.
            </param>
            <param name="parameters">The parameters for the method.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>An object containing the return value of the invoked method.</returns>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.RemoveEventHandlers(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Removes event handlers from an event source by given name of event.
            </summary>
            <param name="source">The event source.</param>
            <param name="eventName">The name of the event.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
        </member>
        <member name="M:ReSharp.Extensions.ObjectExtensions.RemoveAllEventHandlers(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Removes all event handlers from an event source.
            </summary>
            <param name="source">The event source.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
        </member>
        <member name="T:ReSharp.Extensions.RandomExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.Random"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.RandomExtensions.RangeInt64(System.Random)">
            <summary>
            Returns a non-negative random integer.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a random 64-bit signed integer.</param>
            <returns>A 64-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int64.MaxValue"/>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomExtensions.RangeInt64(System.Random,System.Int64)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a random 64-bit signed integer.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0.</param>
            <returns>
            A 64-bit signed integer that is greater than or equal to 0, and less than <c>maxValue</c>;
            that is, the range of return values ordinarily includes 0 but not <c>maxValue</c>. However, if <c>maxValue</c> equals 0, <c>maxValue</c> is returned.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomExtensions.RangeInt64(System.Random,System.Int64,System.Int64)">
            <summary>
            Returns a random 64-bit signed integer that is within a specific range.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a random 64-bit signed integer.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater
            than or equal to <c>minValue</c>.
            </param>
            <returns>
            A 64-bit signed integer greater than or equal to <c>minValue</c> and less than
            <c>maxValue</c>; that is, the range of return values includes <c>minValue</c> but not
            <c>maxValue</c>. If <c>minValue</c> equals <c>maxValue</c>, <c>minValue</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>minValue</c> is greater than <c>maxValue</c>.</exception>
        </member>
        <member name="M:ReSharp.Extensions.RandomExtensions.RangeSingle(System.Random)">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a random floating-point number.</param>
            <returns>A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomExtensions.RangeSingle(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random single that is within a specific range.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a single double.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater
            than or equal to <c>minValue</c>.
            </param>
            <returns>
            A single greater than or equal to <c>minValue</c> and less than <c>maxValue</c>;
            that is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>.
            If <c>minValue</c> equals <c>maxValue</c>, <c>minValue</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>minValue</c> is greater than <c>maxValue</c>.</exception>
        </member>
        <member name="M:ReSharp.Extensions.RandomExtensions.RangeDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random double that is within a specific range.
            </summary>
            <param name="source">The <see cref="T:System.Random"/> to return a random <see cref="T:System.Double"/> value.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater
            than or equal to <c>minValue</c>.
            </param>
            <returns>
            A double greater than or equal to <c>minValue</c> and less than <c>maxValue</c>; that
            is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>. If
            <c>minValue</c> equals <c>maxValue</c>, <c>minValue</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>minValue</c> is greater than <c>maxValue</c>.</exception>
        </member>
        <member name="T:ReSharp.Extensions.RandomUtility">
            <summary>
            Provides static methods to generate pseudo-random number.
            </summary>
        </member>
        <member name="P:ReSharp.Extensions.RandomUtility.RandomWithSeed">
            <summary>
            Gets the <see cref="T:System.Random"/> object with random seed initialized.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextBytesWithRandomSeed(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers on random seed initialized.
            </summary>
            <param name="buffer">The array to be filled with random numbers.</param>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextWithRandomSeed">
            <summary>
            Returns a non-negative random integer on random seed initialized.
            </summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextWithRandomSeed(System.Int32)">
             <summary>
             Returns a non-negative random integer that is less than the specified maximum on random seed initialized.
             </summary>
             <param name="maxValue">The exclusive upper bound of the random number to be generated. <c>maxValue</c> must be greater than or equal to 0.</param>
             <returns>
            A 32-bit signed integer that is greater than or equal to 0, and less than <c>maxValue</c>;
             that is, the range of return values ordinarily includes 0 but not <c>maxValue</c>. However, if <c>maxValue</c> equals 0, <c>maxValue</c> is returned.
             </returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextWithRandomSeed(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range on random seed initialized.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater than or equal to <c>minValue</c>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <c>minValue</c> and less than <c>maxValue</c>;
            that is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>. If minValue equals <c>maxValue</c>, minValue is returned.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextInt64WithRandomSeed">
            <summary>
            Returns a non-negative random integer on random seed initialized.
            </summary>
            <returns>A 64-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int64.MaxValue"/>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextInt64WithRandomSeed(System.Int64)">
             <summary>
             Returns a non-negative random integer that is less than the specified maximum on random seed initialized.
             </summary>
             <param name="maxValue">The exclusive upper bound of the random number to be generated. <c>maxValue</c> must be greater than or equal to 0.</param>
             <returns>
            A 64-bit signed integer that is greater than or equal to 0, and less than <c>maxValue</c>;
             that is, the range of return values ordinarily includes 0 but not <c>maxValue</c>. However, if <c>maxValue</c> equals 0, <c>maxValue</c> is returned.
             </returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextInt64WithRandomSeed(System.Int64,System.Int64)">
            <summary>
            Returns a random integer that is within a specified range on random seed initialized.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater than or equal to <c>minValue</c>.</param>
            <returns>
            A 64-bit signed integer greater than or equal to <c>minValue</c> and less than <c>maxValue</c>;
            that is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>. If minValue equals <c>maxValue</c>, minValue is returned.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextSingleWithRandomSeed">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0 on random seed initialized.
            </summary>
            <returns>A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextSingleWithRandomSeed(System.Single,System.Single)">
            <summary>
            Returns a random floating-point number that is within a specified range on random seed initialized.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater than or equal to <c>minValue</c>.</param>
            <returns>
            A single-precision floating point number greater than or equal to <c>minValue</c> and less than <c>maxValue</c>;
            that is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>. If minValue equals <c>maxValue</c>, minValue is returned.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextDoubleWithRandomSeed">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0 on random seed initialized.
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextDoubleWithRandomSeed(System.Double,System.Double)">
            <summary>
            Returns a random floating-point number that is within a specified range on random seed initialized.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <c>maxValue</c> must be greater than or equal to <c>minValue</c>.</param>
            <returns>
            A double-precision floating point number greater than or equal to <c>minValue</c> and less than <c>maxValue</c>;
            that is, the range of return values includes <c>minValue</c> but not <c>maxValue</c>. If minValue equals <c>maxValue</c>, minValue is returned.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.RandomUtility.NextDoubleSequence(System.Int32,System.Double,System.Double)">
            <summary>
            Returns a sequence with random floating-point numbers that are greater than or equal to <b>minValue</b>, and less than <b>maxValue</b>.
            </summary>
            <param name="count">The count of sequence. </param>
            <param name="minValue">The inclusive lower bound of the random floating-point numbers returned. </param>
            <param name="maxValue">The exclusive upper bound of the random floating-point numbers returned.
            <b>maxValue</b> must be greater than or equal to <b>minValue</b>. </param>
            <returns>A sequence with random floating-point number are greater than or equal to <b>minValue</b>, and less than <b>maxValue</b>. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><b>minValue</b> is greater than <b>maxValue</b>. </exception>
        </member>
        <member name="T:ReSharp.Extensions.StringExtensions">
            <summary>
            Extension methods collection of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:ReSharp.Extensions.StringExtensions.WhitespaceChars">
            <summary>
            The whitespace chars definitions.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.HasValue(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> has value.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to check.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.String"/> has value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.KmpIndexOf(System.String,System.String,System.Boolean)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this
            instance by KMP algorithm.
            </summary>
            <param name="source">The source string. </param>
            <param name="value">The string to seek. </param>
            <param name="ignoreCase">Specifies that <see cref="T:System.String"/> comparisons should ignore case. </param>
            <returns>
            The zero-based index position of <b>value</b> if that string is found, or -1 if it is
            not. If <b>value</b> is <see cref="F:System.String.Empty"/>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException"><b>source</b> is <b>null</b>.</exception>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the specified <see cref="T:System.String"/>.
            </summary>
            <param name="source">The specified <see cref="T:System.String"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <b>source</b> is <b>null</b> or <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the specified string to camel case (just converts first character to lowercase).
            </summary>
            <param name="source">The source string.</param>
            <returns>The specified string converted to camel case.</returns>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Converts the specified string to snake case.
            </summary>
            <param name="source">The source string.</param>
            <returns>The specified string converted to snake case.</returns>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Converts the specified string to title case (just converts first character to uppercase).
            </summary>
            <param name="source">The source string.</param>
            <returns>The specified string converted to title case.</returns>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.TrimAll(System.String)">
            <summary>
            Trims all whitespace characters.
            </summary>
            <param name="source">The source string.</param>
            <returns>The string with removing all whitespace characters.</returns>
        </member>
        <member name="M:ReSharp.Extensions.StringExtensions.TrimAll(System.String,System.Char[])">
            <summary>
            Trims all characters assigned.
            </summary>
            <param name="source">The source string.</param>
            <param name="trimChars">The trim characters assigned.</param>
            <returns>The string with removing all characters assigned.</returns>
        </member>
        <member name="T:ReSharp.Extensions.TypeExtensions">
            <summary>
            Extension method collection for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.GetStaticFieldValue(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the static field value.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get static field value.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The value of the static field.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.SetStaticFieldValue(System.Type,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the static field value of the <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to set static field value.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value of the static field to set.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.GetStaticFieldValuePairs(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the static field value pairs.
            </summary>
            <param name="type">The type.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The static field value pairs of the type.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.GetStaticPropertyValue(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the static property value.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get static property value.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The value of the static property.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.SetStaticPropertyValue(System.Type,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the static property value of the <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to set static property value.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value of the static property.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.GetStaticPropertyValuePairs(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the static property value pairs.
            </summary>
            <param name="type">The type.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The static property value pairs of the type.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.HasStaticMethod(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Determines whether this <see cref="T:System.Type"/> has the static method by a given name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns><c>true</c> if this <see cref="T:System.Type"/> [has static method]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.InvokeConstructor(System.Type,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Invokes the constructor of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/>, a
            bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> and the parameters for the constructor.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke constructor.</param>
            <param name="parameters">
            An array of values that matches the number, order and type (under the constraints of the
            default binder) of the parameters for this constructor.
            </param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.InvokeConstructor(System.Type,System.Type[],System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Invokes the constructor of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/>, a
            bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/>, an array of <see
            cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the
            constructor to get and the parameters for the constructor.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke constructor.</param>
            <param name="types">
            An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the constructor to get.
            </param>
            <param name="parameters">
            An array of values that matches the number, order and type (under the constraints of the
            default binder) of the parameters for this constructor.
            </param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.InvokeGenericStaticMethod(System.Type,System.String,System.Type[],System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Invokes the generic static method of the <see cref="T:System.Type"/> by the given <see
            cref="T:System.Type"/>, a given name, a generic <see cref="T:System.Type"/> and the parameters for the
            static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke generic static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">
            Types to be substituted for the type parameters for the current generic method definition.
            </param>
            <param name="parameters">The parameters for the generic static method.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The object of the method return.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.InvokeStaticMethod(System.Type,System.String,System.Type[],System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Invokes the static method by a given <see cref="T:System.Type"/>, a given name of method, an
            array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the static method to get and the parameters for the static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">
            An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the static method to get.
            </param>
            <param name="parameters">The parameters for the static method.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The object of static method return.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.InvokeStaticMethod(System.Type,System.String,System.Type[],System.Object[]@,System.Reflection.BindingFlags)">
            <summary>
            Invokes the static method by a given <see cref="T:System.Type"/>, a given name of method, an
            array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the static method to get and the parameters for the static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">
            An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the
            parameters for the static method to get.
            </param>
            <param name="parameters">The referenced parameters.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The object of static method return.</returns>
        </member>
        <member name="M:ReSharp.Extensions.TypeExtensions.InvokeStaticMethod(System.Type,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Invokes the static method of the <see cref="T:System.Type"/> by a given <see cref="T:System.Type"/>, a
            given name of method and the parameters for the static method.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to invoke static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters for the static method.</param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.
            </param>
            <returns>The object of static method return.</returns>
        </member>
        <member name="T:ReSharp.Extensions.UInt16Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.UInt16Extensions.Reverse(System.UInt16)">
            <summary>
            Reverse and advances the position of the source by two bytes.
            </summary>
            <param name="source">The <see cref="T:System.UInt16"/> to reverse.</param>
            <returns>A 2-byte unsigned short integer in reverse.</returns>
        </member>
        <member name="M:ReSharp.Extensions.UInt16Extensions.GetLastDigits(System.UInt16,System.Int32)">
            <summary>
            Gets the integer number that the last <c>digits</c> present.
            </summary>
            <param name="source">The <see cref="T:System.UInt16"/> to convert.</param>
            <param name="digits">The digits. </param>
            <returns></returns>
        </member>
        <member name="T:ReSharp.Extensions.UInt32Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.UInt32Extensions.Reverse(System.UInt32)">
            <summary>
            Reverse and advances the position of the source by four bytes.
            </summary>
            <param name="source">The <see cref="T:System.UInt32"/> to reverse.</param>
            <returns>A 4-byte unsigned integer in reverse.</returns>
        </member>
        <member name="M:ReSharp.Extensions.UInt32Extensions.GetLastDigits(System.UInt32,System.Int32)">
            <summary>
            Gets the integer number that the last <c>digits</c> present.
            </summary>
            <param name="source">The <see cref="T:System.UInt32"/> to convert.</param>
            <param name="digits">The digits. </param>
            <returns></returns>
        </member>
        <member name="T:ReSharp.Extensions.UInt64Extensions">
            <summary>
            Extension methods collection of <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.UInt64Extensions.Reverse(System.UInt64)">
            <summary>
            Reverse and advances the position of the source by eight bytes.
            </summary>
            <param name="source">The <see cref="T:System.UInt64"/> to reverse.</param>
            <returns>A 8-byte unsigned long integer in reverse.</returns>
        </member>
        <member name="M:ReSharp.Extensions.UInt64Extensions.GetLastDigits(System.UInt64,System.Int32)">
            <summary>
            Gets the integer number that the last <c>digits</c> present.
            </summary>
            <param name="source">The <see cref="T:System.UInt64"/> to convert.</param>
            <param name="digits">The digits. </param>
            <returns></returns>
        </member>
        <member name="T:ReSharp.Extensions.Utility">
            <summary>
            Provides generic utilities.
            </summary>
        </member>
        <member name="M:ReSharp.Extensions.Utility.GenerateGuidString(System.Boolean)">
            <summary>
            Generate GUID string.
            </summary>
            <param name="withHyphen">If the result string connect with hyphen. </param>
            <returns>The GUID string. </returns>
        </member>
    </members>
</doc>
